<!DOCTYPE html>
<html lang="<?= $this->language ?>"<?php if ($this->isRTL): ?> dir="rtl"<?php endif; ?>>
<head>

  <?php $this->block('head'); ?>
    <meta charset="<?= $this->charset ?>">
    <title><?= $this->title ?></title>
    <base href="<?= $this->base ?>">

    <?php $this->block('meta'); ?>
      <meta name="robots" content="<?= $this->robots ?>">
      <meta name="description" content="<?= $this->description ?>">
      <meta name="generator" content="Contao Open Source CMS">
    <?php $this->endblock(); ?>

    <?= $this->viewport ?>
    <?= $this->framework ?>
    <?= $this->stylesheets ?>
    <?= $this->mooScripts ?>
    <?= $this->head ?>
  <?php $this->endblock(); ?>

</head>
<body id="top"<?php if ($this->class): ?> class="<?= $this->class ?>"<?php endif; ?><?php if ($this->onload): ?> onload="<?= $this->onload ?>"<?php endif; ?> itemscope itemtype="http://schema.org/WebPage">
<div class="stars"></div>
<div class="twinkling"></div>
  <?php $this->block('body'); ?>
    <?php $this->sections('top'); ?>

    <div id="wrapper">

      <?php $this->block('header'); ?>
        <?php if ($this->header): ?>
          <header id="header">
            <div class="inside">
              <?= $this->header ?>
            </div>
          </header>
        <?php endif; ?>
      <?php $this->endblock(); ?>

      <?php $this->sections('before'); ?>

      <?php $this->block('container'); ?>
        <div id="container">

          <?php $this->block('main'); ?>
            <main id="main">
              <div class="inside">
                <?= $this->main ?>
              </div>
              <?php $this->sections('main'); ?>
            </main>
          <?php $this->endblock(); ?>

          <?php $this->block('left'); ?>
            <?php if ($this->left): ?>
              <aside id="left">
                <div class="inside">
                  <?= $this->left ?>
                </div>
              </aside>
            <?php endif; ?>
          <?php $this->endblock(); ?>

          <?php $this->block('right'); ?>
            <?php if ($this->right): ?>
              <aside id="right">
                <div class="inside">
                  <?= $this->right ?>
                </div>
              </aside>
            <?php endif; ?>
          <?php $this->endblock(); ?>

        </div>
      <?php $this->endblock(); ?>

      <?php $this->sections('after'); ?>

      <?php $this->block('footer'); ?>
        <?php if ($this->footer): ?>
          <footer id="footer">
            <div class="inside">
              <?= $this->footer ?>
            </div>
          </footer>
        <?php endif; ?>
      <?php $this->endblock(); ?>

    </div>

    <?php $this->sections('bottom'); ?>
  <?php $this->endblock(); ?>

  <?= $this->mootools ?>

<script async="" src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>
<!--
<script type="importmap">
        {
            "imports": {
                "three": "/files/assets/js/three.module.js"
            }
        }
    </script>-->

<script type="module">

    import * as THREE from 'https://unpkg.com/three@0.120.1/build/three.module.js';

    let camera, scene, renderer;

    let isUserInteracting = false,
        lon = 0, lat = 0,
        phi = 0, theta = 0,
        onPointerDownPointerX = 0,
        onPointerDownPointerY = 0,
        onPointerDownLon = 0,
        onPointerDownLat = 0;

    const distance = 50;

    init();
    animate();

    function init() {

        const container = document.getElementById( 'container' );

        camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 1100 );

        scene = new THREE.Scene();

        const geometry = new THREE.SphereGeometry( 500, 60, 40 );
        // invert the geometry on the x-axis so that all of the faces point inward
        geometry.scale( - 1, 1, 1 );

        const video = document.getElementById( 'video' );
        video.play();

        const texture = new THREE.VideoTexture( video );
        const material = new THREE.MeshBasicMaterial( { map: texture } );

        const mesh = new THREE.Mesh( geometry, material );
        scene.add( mesh );

        renderer = new THREE.WebGLRenderer();
        renderer.setPixelRatio( window.devicePixelRatio );
        renderer.setSize( window.innerWidth, window.innerHeight );
        container.appendChild( renderer.domElement );

        document.addEventListener( 'pointerdown', onPointerDown );
        document.addEventListener( 'pointermove', onPointerMove );
        document.addEventListener( 'pointerup', onPointerUp );

        //

        window.addEventListener( 'resize', onWindowResize );

    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }

    function onPointerDown( event ) {

        isUserInteracting = true;

        onPointerDownPointerX = event.clientX;
        onPointerDownPointerY = event.clientY;

        onPointerDownLon = lon;
        onPointerDownLat = lat;

    }

    function onPointerMove( event ) {

        if ( isUserInteracting === true ) {

            lon = ( onPointerDownPointerX - event.clientX ) * 0.1 + onPointerDownLon;
            lat = ( onPointerDownPointerY - event.clientY ) * 0.1 + onPointerDownLat;

        }

    }

    function onPointerUp() {

        isUserInteracting = false;

    }

    function animate() {

        requestAnimationFrame( animate );
        update();

    }

    function update() {

        lat = Math.max( - 85, Math.min( 85, lat ) );
        phi = THREE.MathUtils.degToRad( 90 - lat );
        theta = THREE.MathUtils.degToRad( lon );

        camera.position.x = distance * Math.sin( phi ) * Math.cos( theta );
        camera.position.y = distance * Math.cos( phi );
        camera.position.z = distance * Math.sin( phi ) * Math.sin( theta );

        camera.lookAt( 0, 0, 0 );

        renderer.render( scene, camera );

    }

</script>

</body>
</html>
